#include <iostream>
#include <vector>

// Recursive binary search function
int binarySearch(const std::vector<int>& nums, int target, int left, int right) {
    if (left > right) {
        // Base case: element not found
        return -1;
    }

    // Calculate the middle index
    int mid = left + (right - left) / 2;

    if (nums[mid] == target) {
        // Base case: element found at the middle index
        return mid;
    } else if (nums[mid] > target) {
        // Recursive case: search in the left half
        return binarySearch(nums, target, left, mid - 1);
    } else {
        // Recursive case: search in the right half
        return binarySearch(nums, target, mid + 1, right);
    }
}

int main() {
    std::vector<int> numbers = {2, 4, 6, 8, 10, 12, 14, 16, 18};
    int target = 10;

    int result = binarySearch(numbers, target, 0, numbers.size() - 1);

    if (result != -1) {
        std::cout << "Element found at index " << result << std::endl;
    } else {
        std::cout << "Element not found in the set." << std::endl;
    }

    return 0;
}
